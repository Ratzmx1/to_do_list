{"version":3,"sources":["components/Input.js","components/Item.js","App.js","serviceWorker.js","index.js"],"names":["Input","state","textInput","onChangeTextInput","e","setState","target","value","onSubmitForm","props","onResults","preventDefault","onSubmit","this","className","type","onChange","Component","Item","click","text","ready","forceUpdate","onClick","style","textDecoration","data","App","list","result","auxList","reverse","push","localStorage","getItem","JSON","parse","map","item","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error","console","message"],"mappings":"kOAEMA,G,wNAEJC,MAAQ,CACNC,UAAW,I,EAGbC,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CAAEH,UAAWE,EAAEE,OAAOC,S,EAGtCC,aAAe,SAACJ,GACV,EAAKH,MAAMC,YACb,EAAKO,MAAMC,UAAU,EAAKT,MAAMC,WAChC,EAAKG,SAAS,CAAEH,UAAW,MAG7BE,EAAEO,kB,uDAIF,OACE,6BACE,0BAAMC,SAAUC,KAAKL,cACnB,yBAAKM,UAAU,qBACb,2BACEA,UAAU,eACVC,KAAK,OACLC,SAAUH,KAAKV,kBACfI,MAAOM,KAAKZ,MAAMC,aAGtB,4BAAQa,KAAK,SAASD,UAAU,6BAAhC,iB,GA/BUG,cCAdC,E,4MACJC,MAAQ,WACN,EAAKV,MAAMW,KAAKC,OAAQ,EACxB,EAAKC,e,uDAIL,OACE,6BACE,yBAAKR,UAAU,OAAOS,QAASV,KAAKM,OAClC,yBAAKL,UAAU,aACZD,KAAKJ,MAAMW,KAAKC,MACf,uBAAGG,MAAO,CAAEC,eAAgB,iBACzBZ,KAAKJ,MAAMW,KAAKM,MAGnB,2BAAIb,KAAKJ,MAAMW,KAAKM,a,GAhBfT,aC4CJU,E,4MAtCb1B,MAAQ,CACN2B,KAAM,I,EAQRlB,UAAY,SAACmB,GACX,IAAMC,EAAU,EAAK7B,MAAM2B,KAC3BE,EAAQC,UACRD,EAAQE,KAAK,CAAEN,KAAMG,EAAQR,OAAO,IACpCS,EAAQC,UACR,EAAK1B,SAAS,CAAEuB,KAAME,K,kEATtB,IAAMJ,EAAOO,aAAaC,QAAQ,QAC9BR,GAAMb,KAAKR,SAAS,CAAEuB,KAAMO,KAAKC,MAAMV,O,+BAY3C,OACE,yBAAKZ,UAAU,YACb,yCACA,yBAAKA,UAAU,aACb,kBAAC,EAAD,CAAOJ,UAAWG,KAAKH,YACvB,yBAAKI,UAAU,QACZD,KAAKZ,MAAM2B,KAAKS,KAAI,SAACC,EAAMC,GAC1B,OACE,yBAAKC,IAAKD,GACR,kBAAC,EAAD,CAAMnB,KAAMkB,e,GA7BZrB,aCMEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAc/B,MACrBgC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.34cde5ad.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Input extends Component {\r\n  // eslint-disable-next-line\r\n  state = {\r\n    textInput: \"\",\r\n  };\r\n\r\n  onChangeTextInput = (e) => {\r\n    this.setState({ textInput: e.target.value });\r\n  };\r\n\r\n  onSubmitForm = (e) => {\r\n    if (this.state.textInput) {\r\n      this.props.onResults(this.state.textInput);\r\n      this.setState({ textInput: \"\" });\r\n    }\r\n\r\n    e.preventDefault();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.onSubmitForm}>\r\n          <div className=\"form-group inline\">\r\n            <input\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n              onChange={this.onChangeTextInput}\r\n              value={this.state.textInput}\r\n            ></input>\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-primary btn-block\">\r\n            Agregar\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport { Input };\r\n","import React, { Component } from \"react\";\r\n\r\nclass Item extends Component {\r\n  click = () => {\r\n    this.props.text.ready = true;\r\n    this.forceUpdate();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"card\" onClick={this.click}>\r\n          <div className=\"card-body\">\r\n            {this.props.text.ready ? (\r\n              <p style={{ textDecoration: \"line-through\" }}>\r\n                {this.props.text.data}\r\n              </p>\r\n            ) : (\r\n              <p>{this.props.text.data}</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport { Item };\r\n","import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport { Input } from \"./components/Input\";\nimport { Item } from \"./components/Item\";\n\nclass App extends Component {\n  // eslint-disable-next-line\n  state = {\n    list: [],\n  };\n\n  componentDidMount() {\n    const data = localStorage.getItem(\"list\");\n    if (data) this.setState({ list: JSON.parse(data) });\n  }\n\n  onResults = (result) => {\n    const auxList = this.state.list;\n    auxList.reverse();\n    auxList.push({ data: result, ready: false });\n    auxList.reverse();\n    this.setState({ list: auxList });\n  };\n\n  render() {\n    return (\n      <div className=\"App mt-5\">\n        <h1>ToDo List</h1>\n        <div className=\"container\">\n          <Input onResults={this.onResults} />\n          <div className=\"mt-5\">\n            {this.state.list.map((item, index) => {\n              return (\n                <div key={index}>\n                  <Item text={item} />\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}